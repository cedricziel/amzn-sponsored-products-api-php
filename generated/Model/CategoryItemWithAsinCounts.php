<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\AmznSponsoredProductsApiPHP\Generated\Model;

class CategoryItemWithAsinCounts extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The path of the category, which contains the current category and all parent categories.
     *
     * @var string
     */
    protected $categoryPath;
    /**
     * The name of the category.
     *
     * @var string
     */
    protected $name;
    /**
     * @var IntegerRange
     */
    protected $asinCounts;
    /**
     * The category id of the parent node.
     *
     * @var string
     */
    protected $parentCategoryId;
    /**
     * The category id of the current node.
     *
     * @var string
     */
    protected $id;

    /**
     * The path of the category, which contains the current category and all parent categories.
     */
    public function getCategoryPath(): string
    {
        return $this->categoryPath;
    }

    /**
     * The path of the category, which contains the current category and all parent categories.
     */
    public function setCategoryPath(string $categoryPath): self
    {
        $this->initialized['categoryPath'] = true;
        $this->categoryPath = $categoryPath;

        return $this;
    }

    /**
     * The name of the category.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * The name of the category.
     */
    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    public function getAsinCounts(): IntegerRange
    {
        return $this->asinCounts;
    }

    public function setAsinCounts(IntegerRange $asinCounts): self
    {
        $this->initialized['asinCounts'] = true;
        $this->asinCounts = $asinCounts;

        return $this;
    }

    /**
     * The category id of the parent node.
     */
    public function getParentCategoryId(): string
    {
        return $this->parentCategoryId;
    }

    /**
     * The category id of the parent node.
     */
    public function setParentCategoryId(string $parentCategoryId): self
    {
        $this->initialized['parentCategoryId'] = true;
        $this->parentCategoryId = $parentCategoryId;

        return $this;
    }

    /**
     * The category id of the current node.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * The category id of the current node.
     */
    public function setId(string $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }
}
