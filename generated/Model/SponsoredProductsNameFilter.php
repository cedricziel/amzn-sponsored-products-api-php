<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\AmznSponsoredProductsApiPHP\Generated\Model;

class SponsoredProductsNameFilter extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Match type for query filters.
     * | Value |  Description |
     * |-----------|------------|
     * | `BROAD_MATCH` | Match if the queried value contains the filter value (substring matching). Note: If queryTermMatchType is set to BROAD_MATCH, only matches for the first query included will be returned. |
     * | `EXACT_MATCH` | Match if the queried value is exactly equivalent to the filter value. |.
     *
     * @var string
     */
    protected $queryTermMatchType;
    /**
     * @var list<string>
     */
    protected $include;

    /**
     * Match type for query filters.
     * | Value |  Description |
     * |-----------|------------|
     * | `BROAD_MATCH` | Match if the queried value contains the filter value (substring matching). Note: If queryTermMatchType is set to BROAD_MATCH, only matches for the first query included will be returned. |
     * | `EXACT_MATCH` | Match if the queried value is exactly equivalent to the filter value. |.
     */
    public function getQueryTermMatchType(): string
    {
        return $this->queryTermMatchType;
    }

    /**
     * Match type for query filters.
     * | Value |  Description |
     * |-----------|------------|
     * | `BROAD_MATCH` | Match if the queried value contains the filter value (substring matching). Note: If queryTermMatchType is set to BROAD_MATCH, only matches for the first query included will be returned. |
     * | `EXACT_MATCH` | Match if the queried value is exactly equivalent to the filter value. |.
     */
    public function setQueryTermMatchType(string $queryTermMatchType): self
    {
        $this->initialized['queryTermMatchType'] = true;
        $this->queryTermMatchType = $queryTermMatchType;

        return $this;
    }

    /**
     * @return list<string>
     */
    public function getInclude(): array
    {
        return $this->include;
    }

    /**
     * @param list<string> $include
     */
    public function setInclude(array $include): self
    {
        $this->initialized['include'] = true;
        $this->include = $include;

        return $this;
    }
}
