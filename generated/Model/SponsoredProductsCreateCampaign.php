<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\AmznSponsoredProductsApiPHP\Generated\Model;

class SponsoredProductsCreateCampaign extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The identifier of an existing portfolio to which the campaign is associated.
     *
     * @var string
     */
    protected $portfolioId;
    /**
     * The format of the date is YYYY-MM-DD.
     *
     * @var \DateTime|null
     */
    protected $endDate;
    /**
     * The name of the campaign.
     *
     * @var string
     */
    protected $name;
    /**
     * @var string
     */
    protected $targetingType;
    /**
     * Entity state for create or update operation.
     *
     * @var string
     */
    protected $state;
    /**
     * Specifies bidding controls. DynamicBidding is optional for both Create and Update requests.
     * For Create Campaign requests, if you don't specify dynamicBidding, default strategy of `LEGACY_FOR_SALES` will be applied.
     *
     * @var SponsoredProductsCreateOrUpdateDynamicBidding
     */
    protected $dynamicBidding;
    /**
     * Default: today's date. The format of the date is YYYY-MM-DD.
     *
     * @var \DateTime
     */
    protected $startDate;
    /**
     * @var SponsoredProductsCreateOrUpdateBudget
     */
    protected $budget;
    /**
     * A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
     *
     * @var array<string, string>
     */
    protected $tags;

    /**
     * The identifier of an existing portfolio to which the campaign is associated.
     */
    public function getPortfolioId(): string
    {
        return $this->portfolioId;
    }

    /**
     * The identifier of an existing portfolio to which the campaign is associated.
     */
    public function setPortfolioId(string $portfolioId): self
    {
        $this->initialized['portfolioId'] = true;
        $this->portfolioId = $portfolioId;

        return $this;
    }

    /**
     * The format of the date is YYYY-MM-DD.
     */
    public function getEndDate(): ?\DateTime
    {
        return $this->endDate;
    }

    /**
     * The format of the date is YYYY-MM-DD.
     */
    public function setEndDate(?\DateTime $endDate): self
    {
        $this->initialized['endDate'] = true;
        $this->endDate = $endDate;

        return $this;
    }

    /**
     * The name of the campaign.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * The name of the campaign.
     */
    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    public function getTargetingType(): string
    {
        return $this->targetingType;
    }

    public function setTargetingType(string $targetingType): self
    {
        $this->initialized['targetingType'] = true;
        $this->targetingType = $targetingType;

        return $this;
    }

    /**
     * Entity state for create or update operation.
     */
    public function getState(): string
    {
        return $this->state;
    }

    /**
     * Entity state for create or update operation.
     */
    public function setState(string $state): self
    {
        $this->initialized['state'] = true;
        $this->state = $state;

        return $this;
    }

    /**
     * Specifies bidding controls. DynamicBidding is optional for both Create and Update requests.
     * For Create Campaign requests, if you don't specify dynamicBidding, default strategy of `LEGACY_FOR_SALES` will be applied.
     */
    public function getDynamicBidding(): SponsoredProductsCreateOrUpdateDynamicBidding
    {
        return $this->dynamicBidding;
    }

    /**
     * Specifies bidding controls. DynamicBidding is optional for both Create and Update requests.
     * For Create Campaign requests, if you don't specify dynamicBidding, default strategy of `LEGACY_FOR_SALES` will be applied.
     */
    public function setDynamicBidding(SponsoredProductsCreateOrUpdateDynamicBidding $dynamicBidding): self
    {
        $this->initialized['dynamicBidding'] = true;
        $this->dynamicBidding = $dynamicBidding;

        return $this;
    }

    /**
     * Default: today's date. The format of the date is YYYY-MM-DD.
     */
    public function getStartDate(): \DateTime
    {
        return $this->startDate;
    }

    /**
     * Default: today's date. The format of the date is YYYY-MM-DD.
     */
    public function setStartDate(\DateTime $startDate): self
    {
        $this->initialized['startDate'] = true;
        $this->startDate = $startDate;

        return $this;
    }

    public function getBudget(): SponsoredProductsCreateOrUpdateBudget
    {
        return $this->budget;
    }

    public function setBudget(SponsoredProductsCreateOrUpdateBudget $budget): self
    {
        $this->initialized['budget'] = true;
        $this->budget = $budget;

        return $this;
    }

    /**
     * A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
     *
     * @return array<string, string>
     */
    public function getTags(): iterable
    {
        return $this->tags;
    }

    /**
     * A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
     *
     * @param array<string, string> $tags
     */
    public function setTags(iterable $tags): self
    {
        $this->initialized['tags'] = true;
        $this->tags = $tags;

        return $this;
    }
}
