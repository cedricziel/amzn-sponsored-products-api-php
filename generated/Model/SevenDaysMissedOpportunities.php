<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\AmznSponsoredProductsApiPHP\Generated\Model;

class SevenDaysMissedOpportunities extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Lower bound estimate of the additional sales the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period. Provided in local currency.
     *
     * @var float
     */
    protected $estimatedMissedSalesLower;
    /**
     * Upper bound estimate of the additional sales the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period. Provided in local currency.
     *
     * @var float
     */
    protected $estimatedMissedSalesUpper;
    /**
     * End date of the date range for which missed opportunity metrics are provided (YYYYMMDD). Local time.
     *
     * @var string
     */
    protected $endDate;
    /**
     * Lower bound estimate of the additional impressions the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     *
     * @var int
     */
    protected $estimatedMissedImpressionsLower;
    /**
     * Lower bound estimate of the additional clicks the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     *
     * @var int
     */
    protected $estimatedMissedClicksLower;
    /**
     * Upper bound estimate of the additional clicks the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     *
     * @var int
     */
    protected $estimatedMissedClicksUpper;
    /**
     * Upper bound estimate of the additional impressions the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     *
     * @var int
     */
    protected $estimatedMissedImpressionsUpper;
    /**
     * Starting date of the date range for which missed opportunity metrics are provided (YYYYMMDD). Local time.
     *
     * @var string
     */
    protected $startDate;
    /**
     * percentage of time the campaign is active with a budget. Provided as a decimal ranging from 0 to 1 (e.g. 0.76 means the campaign was in budget for 76% of the time between the startDate and endDate period).
     *
     * @var float
     */
    protected $percentTimeInBudget;

    /**
     * Lower bound estimate of the additional sales the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period. Provided in local currency.
     */
    public function getEstimatedMissedSalesLower(): float
    {
        return $this->estimatedMissedSalesLower;
    }

    /**
     * Lower bound estimate of the additional sales the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period. Provided in local currency.
     */
    public function setEstimatedMissedSalesLower(float $estimatedMissedSalesLower): self
    {
        $this->initialized['estimatedMissedSalesLower'] = true;
        $this->estimatedMissedSalesLower = $estimatedMissedSalesLower;

        return $this;
    }

    /**
     * Upper bound estimate of the additional sales the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period. Provided in local currency.
     */
    public function getEstimatedMissedSalesUpper(): float
    {
        return $this->estimatedMissedSalesUpper;
    }

    /**
     * Upper bound estimate of the additional sales the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period. Provided in local currency.
     */
    public function setEstimatedMissedSalesUpper(float $estimatedMissedSalesUpper): self
    {
        $this->initialized['estimatedMissedSalesUpper'] = true;
        $this->estimatedMissedSalesUpper = $estimatedMissedSalesUpper;

        return $this;
    }

    /**
     * End date of the date range for which missed opportunity metrics are provided (YYYYMMDD). Local time.
     */
    public function getEndDate(): string
    {
        return $this->endDate;
    }

    /**
     * End date of the date range for which missed opportunity metrics are provided (YYYYMMDD). Local time.
     */
    public function setEndDate(string $endDate): self
    {
        $this->initialized['endDate'] = true;
        $this->endDate = $endDate;

        return $this;
    }

    /**
     * Lower bound estimate of the additional impressions the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     */
    public function getEstimatedMissedImpressionsLower(): int
    {
        return $this->estimatedMissedImpressionsLower;
    }

    /**
     * Lower bound estimate of the additional impressions the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     */
    public function setEstimatedMissedImpressionsLower(int $estimatedMissedImpressionsLower): self
    {
        $this->initialized['estimatedMissedImpressionsLower'] = true;
        $this->estimatedMissedImpressionsLower = $estimatedMissedImpressionsLower;

        return $this;
    }

    /**
     * Lower bound estimate of the additional clicks the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     */
    public function getEstimatedMissedClicksLower(): int
    {
        return $this->estimatedMissedClicksLower;
    }

    /**
     * Lower bound estimate of the additional clicks the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     */
    public function setEstimatedMissedClicksLower(int $estimatedMissedClicksLower): self
    {
        $this->initialized['estimatedMissedClicksLower'] = true;
        $this->estimatedMissedClicksLower = $estimatedMissedClicksLower;

        return $this;
    }

    /**
     * Upper bound estimate of the additional clicks the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     */
    public function getEstimatedMissedClicksUpper(): int
    {
        return $this->estimatedMissedClicksUpper;
    }

    /**
     * Upper bound estimate of the additional clicks the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     */
    public function setEstimatedMissedClicksUpper(int $estimatedMissedClicksUpper): self
    {
        $this->initialized['estimatedMissedClicksUpper'] = true;
        $this->estimatedMissedClicksUpper = $estimatedMissedClicksUpper;

        return $this;
    }

    /**
     * Upper bound estimate of the additional impressions the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     */
    public function getEstimatedMissedImpressionsUpper(): int
    {
        return $this->estimatedMissedImpressionsUpper;
    }

    /**
     * Upper bound estimate of the additional impressions the campaign might have generated if it had not run out of budget during the {startDate} to {endDate} period.
     */
    public function setEstimatedMissedImpressionsUpper(int $estimatedMissedImpressionsUpper): self
    {
        $this->initialized['estimatedMissedImpressionsUpper'] = true;
        $this->estimatedMissedImpressionsUpper = $estimatedMissedImpressionsUpper;

        return $this;
    }

    /**
     * Starting date of the date range for which missed opportunity metrics are provided (YYYYMMDD). Local time.
     */
    public function getStartDate(): string
    {
        return $this->startDate;
    }

    /**
     * Starting date of the date range for which missed opportunity metrics are provided (YYYYMMDD). Local time.
     */
    public function setStartDate(string $startDate): self
    {
        $this->initialized['startDate'] = true;
        $this->startDate = $startDate;

        return $this;
    }

    /**
     * percentage of time the campaign is active with a budget. Provided as a decimal ranging from 0 to 1 (e.g. 0.76 means the campaign was in budget for 76% of the time between the startDate and endDate period).
     */
    public function getPercentTimeInBudget(): float
    {
        return $this->percentTimeInBudget;
    }

    /**
     * percentage of time the campaign is active with a budget. Provided as a decimal ranging from 0 to 1 (e.g. 0.76 means the campaign was in budget for 76% of the time between the startDate and endDate period).
     */
    public function setPercentTimeInBudget(float $percentTimeInBudget): self
    {
        $this->initialized['percentTimeInBudget'] = true;
        $this->percentTimeInBudget = $percentTimeInBudget;

        return $this;
    }
}
