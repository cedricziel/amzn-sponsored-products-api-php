<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\amznsponsoredproductsapiphp\Generated\Model;

class OptimizationRulesAPISwaggerOptimizationRuleWithoutRuleId extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The recurrence of the optimization rule application.
     *
     * @var OptimizationRulesAPISwaggerRuleRecurrence
     */
    protected $recurrence;
    /**
     * The type of the optimization rule. Only Support BID as of now.
     *
     * @var string
     */
    protected $ruleCategory;
    /**
     * The sub-category of the optimization rule. Only Support SCHEDULE as of now.
     *
     * @var string
     */
    protected $ruleSubCategory;
    /**
     * The rule name.
     *
     * @var string
     */
    protected $ruleName;
    /**
     * Action to be taken by the rule.
     *
     * @var OptimizationRulesAPISwaggerRuleAction
     */
    protected $action;
    /**
     * @var list<OptimizationRulesAPISwaggerRuleCondition>
     */
    protected $conditions;
    /**
     * The status of a rule. Only ENABLED and PAUSED are accepted in requests.
     *
     * @var string
     */
    protected $status;

    /**
     * The recurrence of the optimization rule application.
     */
    public function getRecurrence(): OptimizationRulesAPISwaggerRuleRecurrence
    {
        return $this->recurrence;
    }

    /**
     * The recurrence of the optimization rule application.
     */
    public function setRecurrence(OptimizationRulesAPISwaggerRuleRecurrence $recurrence): self
    {
        $this->initialized['recurrence'] = true;
        $this->recurrence = $recurrence;

        return $this;
    }

    /**
     * The type of the optimization rule. Only Support BID as of now.
     */
    public function getRuleCategory(): string
    {
        return $this->ruleCategory;
    }

    /**
     * The type of the optimization rule. Only Support BID as of now.
     */
    public function setRuleCategory(string $ruleCategory): self
    {
        $this->initialized['ruleCategory'] = true;
        $this->ruleCategory = $ruleCategory;

        return $this;
    }

    /**
     * The sub-category of the optimization rule. Only Support SCHEDULE as of now.
     */
    public function getRuleSubCategory(): string
    {
        return $this->ruleSubCategory;
    }

    /**
     * The sub-category of the optimization rule. Only Support SCHEDULE as of now.
     */
    public function setRuleSubCategory(string $ruleSubCategory): self
    {
        $this->initialized['ruleSubCategory'] = true;
        $this->ruleSubCategory = $ruleSubCategory;

        return $this;
    }

    /**
     * The rule name.
     */
    public function getRuleName(): string
    {
        return $this->ruleName;
    }

    /**
     * The rule name.
     */
    public function setRuleName(string $ruleName): self
    {
        $this->initialized['ruleName'] = true;
        $this->ruleName = $ruleName;

        return $this;
    }

    /**
     * Action to be taken by the rule.
     */
    public function getAction(): OptimizationRulesAPISwaggerRuleAction
    {
        return $this->action;
    }

    /**
     * Action to be taken by the rule.
     */
    public function setAction(OptimizationRulesAPISwaggerRuleAction $action): self
    {
        $this->initialized['action'] = true;
        $this->action = $action;

        return $this;
    }

    /**
     * @return list<OptimizationRulesAPISwaggerRuleCondition>
     */
    public function getConditions(): array
    {
        return $this->conditions;
    }

    /**
     * @param list<OptimizationRulesAPISwaggerRuleCondition> $conditions
     */
    public function setConditions(array $conditions): self
    {
        $this->initialized['conditions'] = true;
        $this->conditions = $conditions;

        return $this;
    }

    /**
     * The status of a rule. Only ENABLED and PAUSED are accepted in requests.
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * The status of a rule. Only ENABLED and PAUSED are accepted in requests.
     */
    public function setStatus(string $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }
}
