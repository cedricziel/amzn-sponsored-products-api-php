<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\amznsponsoredproductsapiphp\Generated\Normalizer;

use cedricziel\amznsponsoredproductsapiphp\Generated\Runtime\Normalizer\CheckArray;
use cedricziel\amznsponsoredproductsapiphp\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class SponsoredProductsRangeErrorNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsRangeError::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsRangeError::class === get_class($data);
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsRangeError();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('reason', $data)) {
                $object->setReason($data['reason']);
                unset($data['reason']);
            }
            if (\array_key_exists('marketplace', $data)) {
                $object->setMarketplace($data['marketplace']);
                unset($data['marketplace']);
            }
            if (\array_key_exists('allowed', $data)) {
                $values = [];
                foreach ($data['allowed'] as $value) {
                    $values[] = $value;
                }
                $object->setAllowed($values);
                unset($data['allowed']);
            }
            if (\array_key_exists('cause', $data)) {
                $object->setCause($this->denormalizer->denormalize($data['cause'], \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsErrorCause::class, 'json', $context));
                unset($data['cause']);
            }
            if (\array_key_exists('upperLimit', $data)) {
                $object->setUpperLimit($data['upperLimit']);
                unset($data['upperLimit']);
            }
            if (\array_key_exists('lowerLimit', $data)) {
                $object->setLowerLimit($data['lowerLimit']);
                unset($data['lowerLimit']);
            }
            if (\array_key_exists('message', $data)) {
                $object->setMessage($data['message']);
                unset($data['message']);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['reason'] = $object->getReason();
            if ($object->isInitialized('marketplace') && null !== $object->getMarketplace()) {
                $data['marketplace'] = $object->getMarketplace();
            }
            if ($object->isInitialized('allowed') && null !== $object->getAllowed()) {
                $values = [];
                foreach ($object->getAllowed() as $value) {
                    $values[] = $value;
                }
                $data['allowed'] = $values;
            }
            if ($object->isInitialized('cause') && null !== $object->getCause()) {
                $data['cause'] = $this->normalizer->normalize($object->getCause(), 'json', $context);
            }
            if ($object->isInitialized('upperLimit') && null !== $object->getUpperLimit()) {
                $data['upperLimit'] = $object->getUpperLimit();
            }
            if ($object->isInitialized('lowerLimit') && null !== $object->getLowerLimit()) {
                $data['lowerLimit'] = $object->getLowerLimit();
            }
            $data['message'] = $object->getMessage();
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsRangeError::class => false];
        }
    }
} else {
    class SponsoredProductsRangeErrorNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsRangeError::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsRangeError::class === get_class($data);
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsRangeError();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('reason', $data)) {
                $object->setReason($data['reason']);
                unset($data['reason']);
            }
            if (\array_key_exists('marketplace', $data)) {
                $object->setMarketplace($data['marketplace']);
                unset($data['marketplace']);
            }
            if (\array_key_exists('allowed', $data)) {
                $values = [];
                foreach ($data['allowed'] as $value) {
                    $values[] = $value;
                }
                $object->setAllowed($values);
                unset($data['allowed']);
            }
            if (\array_key_exists('cause', $data)) {
                $object->setCause($this->denormalizer->denormalize($data['cause'], \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsErrorCause::class, 'json', $context));
                unset($data['cause']);
            }
            if (\array_key_exists('upperLimit', $data)) {
                $object->setUpperLimit($data['upperLimit']);
                unset($data['upperLimit']);
            }
            if (\array_key_exists('lowerLimit', $data)) {
                $object->setLowerLimit($data['lowerLimit']);
                unset($data['lowerLimit']);
            }
            if (\array_key_exists('message', $data)) {
                $object->setMessage($data['message']);
                unset($data['message']);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['reason'] = $object->getReason();
            if ($object->isInitialized('marketplace') && null !== $object->getMarketplace()) {
                $data['marketplace'] = $object->getMarketplace();
            }
            if ($object->isInitialized('allowed') && null !== $object->getAllowed()) {
                $values = [];
                foreach ($object->getAllowed() as $value) {
                    $values[] = $value;
                }
                $data['allowed'] = $values;
            }
            if ($object->isInitialized('cause') && null !== $object->getCause()) {
                $data['cause'] = $this->normalizer->normalize($object->getCause(), 'json', $context);
            }
            if ($object->isInitialized('upperLimit') && null !== $object->getUpperLimit()) {
                $data['upperLimit'] = $object->getUpperLimit();
            }
            if ($object->isInitialized('lowerLimit') && null !== $object->getLowerLimit()) {
                $data['lowerLimit'] = $object->getLowerLimit();
            }
            $data['message'] = $object->getMessage();
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsRangeError::class => false];
        }
    }
}
