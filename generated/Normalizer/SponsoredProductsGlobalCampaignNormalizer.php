<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\amznsponsoredproductsapiphp\Generated\Normalizer;

use cedricziel\amznsponsoredproductsapiphp\Generated\Runtime\Normalizer\CheckArray;
use cedricziel\amznsponsoredproductsapiphp\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class SponsoredProductsGlobalCampaignNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalCampaign::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalCampaign::class === get_class($data);
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalCampaign();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('endDate', $data)) {
                $object->setEndDate(\DateTime::createFromFormat('Y-m-d', $data['endDate'])->setTime(0, 0, 0));
                unset($data['endDate']);
            }
            if (\array_key_exists('campaignId', $data)) {
                $object->setCampaignId($data['campaignId']);
                unset($data['campaignId']);
            }
            if (\array_key_exists('applicableMarketplaces', $data)) {
                $values = [];
                foreach ($data['applicableMarketplaces'] as $value) {
                    $values[] = $value;
                }
                $object->setApplicableMarketplaces($values);
                unset($data['applicableMarketplaces']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('targetingType', $data)) {
                $object->setTargetingType($data['targetingType']);
                unset($data['targetingType']);
            }
            if (\array_key_exists('state', $data)) {
                $object->setState($this->denormalizer->denormalize($data['state'], \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalEntityState::class, 'json', $context));
                unset($data['state']);
            }
            if (\array_key_exists('dynamicBidding', $data)) {
                $object->setDynamicBidding($this->denormalizer->denormalize($data['dynamicBidding'], \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsDynamicBidding::class, 'json', $context));
                unset($data['dynamicBidding']);
            }
            if (\array_key_exists('startDate', $data)) {
                $object->setStartDate(\DateTime::createFromFormat('Y-m-d', $data['startDate'])->setTime(0, 0, 0));
                unset($data['startDate']);
            }
            if (\array_key_exists('budget', $data)) {
                $object->setBudget($this->denormalizer->denormalize($data['budget'], \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalBudget::class, 'json', $context));
                unset($data['budget']);
            }
            if (\array_key_exists('tags', $data)) {
                $values_1 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($data['tags'] as $key => $value_1) {
                    $values_1[$key] = $value_1;
                }
                $object->setTags($values_1);
                unset($data['tags']);
            }
            if (\array_key_exists('extendedData', $data)) {
                $object->setExtendedData($this->denormalizer->denormalize($data['extendedData'], \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalCampaignExtendedData::class, 'json', $context));
                unset($data['extendedData']);
            }
            foreach ($data as $key_1 => $value_2) {
                if (preg_match('/.*/', (string) $key_1)) {
                    $object[$key_1] = $value_2;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('endDate') && null !== $object->getEndDate()) {
                $data['endDate'] = $object->getEndDate()->format('Y-m-d');
            }
            $data['campaignId'] = $object->getCampaignId();
            if ($object->isInitialized('applicableMarketplaces') && null !== $object->getApplicableMarketplaces()) {
                $values = [];
                foreach ($object->getApplicableMarketplaces() as $value) {
                    $values[] = $value;
                }
                $data['applicableMarketplaces'] = $values;
            }
            $data['name'] = $object->getName();
            $data['targetingType'] = $object->getTargetingType();
            $data['state'] = $this->normalizer->normalize($object->getState(), 'json', $context);
            if ($object->isInitialized('dynamicBidding') && null !== $object->getDynamicBidding()) {
                $data['dynamicBidding'] = $this->normalizer->normalize($object->getDynamicBidding(), 'json', $context);
            }
            if ($object->isInitialized('startDate') && null !== $object->getStartDate()) {
                $data['startDate'] = $object->getStartDate()->format('Y-m-d');
            }
            $data['budget'] = $this->normalizer->normalize($object->getBudget(), 'json', $context);
            if ($object->isInitialized('tags') && null !== $object->getTags()) {
                $values_1 = [];
                foreach ($object->getTags() as $key => $value_1) {
                    $values_1[$key] = $value_1;
                }
                $data['tags'] = $values_1;
            }
            if ($object->isInitialized('extendedData') && null !== $object->getExtendedData()) {
                $data['extendedData'] = $this->normalizer->normalize($object->getExtendedData(), 'json', $context);
            }
            foreach ($object as $key_1 => $value_2) {
                if (preg_match('/.*/', (string) $key_1)) {
                    $data[$key_1] = $value_2;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalCampaign::class => false];
        }
    }
} else {
    class SponsoredProductsGlobalCampaignNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalCampaign::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalCampaign::class === get_class($data);
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalCampaign();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('endDate', $data)) {
                $object->setEndDate(\DateTime::createFromFormat('Y-m-d', $data['endDate'])->setTime(0, 0, 0));
                unset($data['endDate']);
            }
            if (\array_key_exists('campaignId', $data)) {
                $object->setCampaignId($data['campaignId']);
                unset($data['campaignId']);
            }
            if (\array_key_exists('applicableMarketplaces', $data)) {
                $values = [];
                foreach ($data['applicableMarketplaces'] as $value) {
                    $values[] = $value;
                }
                $object->setApplicableMarketplaces($values);
                unset($data['applicableMarketplaces']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('targetingType', $data)) {
                $object->setTargetingType($data['targetingType']);
                unset($data['targetingType']);
            }
            if (\array_key_exists('state', $data)) {
                $object->setState($this->denormalizer->denormalize($data['state'], \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalEntityState::class, 'json', $context));
                unset($data['state']);
            }
            if (\array_key_exists('dynamicBidding', $data)) {
                $object->setDynamicBidding($this->denormalizer->denormalize($data['dynamicBidding'], \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsDynamicBidding::class, 'json', $context));
                unset($data['dynamicBidding']);
            }
            if (\array_key_exists('startDate', $data)) {
                $object->setStartDate(\DateTime::createFromFormat('Y-m-d', $data['startDate'])->setTime(0, 0, 0));
                unset($data['startDate']);
            }
            if (\array_key_exists('budget', $data)) {
                $object->setBudget($this->denormalizer->denormalize($data['budget'], \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalBudget::class, 'json', $context));
                unset($data['budget']);
            }
            if (\array_key_exists('tags', $data)) {
                $values_1 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($data['tags'] as $key => $value_1) {
                    $values_1[$key] = $value_1;
                }
                $object->setTags($values_1);
                unset($data['tags']);
            }
            if (\array_key_exists('extendedData', $data)) {
                $object->setExtendedData($this->denormalizer->denormalize($data['extendedData'], \cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalCampaignExtendedData::class, 'json', $context));
                unset($data['extendedData']);
            }
            foreach ($data as $key_1 => $value_2) {
                if (preg_match('/.*/', (string) $key_1)) {
                    $object[$key_1] = $value_2;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('endDate') && null !== $object->getEndDate()) {
                $data['endDate'] = $object->getEndDate()->format('Y-m-d');
            }
            $data['campaignId'] = $object->getCampaignId();
            if ($object->isInitialized('applicableMarketplaces') && null !== $object->getApplicableMarketplaces()) {
                $values = [];
                foreach ($object->getApplicableMarketplaces() as $value) {
                    $values[] = $value;
                }
                $data['applicableMarketplaces'] = $values;
            }
            $data['name'] = $object->getName();
            $data['targetingType'] = $object->getTargetingType();
            $data['state'] = $this->normalizer->normalize($object->getState(), 'json', $context);
            if ($object->isInitialized('dynamicBidding') && null !== $object->getDynamicBidding()) {
                $data['dynamicBidding'] = $this->normalizer->normalize($object->getDynamicBidding(), 'json', $context);
            }
            if ($object->isInitialized('startDate') && null !== $object->getStartDate()) {
                $data['startDate'] = $object->getStartDate()->format('Y-m-d');
            }
            $data['budget'] = $this->normalizer->normalize($object->getBudget(), 'json', $context);
            if ($object->isInitialized('tags') && null !== $object->getTags()) {
                $values_1 = [];
                foreach ($object->getTags() as $key => $value_1) {
                    $values_1[$key] = $value_1;
                }
                $data['tags'] = $values_1;
            }
            if ($object->isInitialized('extendedData') && null !== $object->getExtendedData()) {
                $data['extendedData'] = $this->normalizer->normalize($object->getExtendedData(), 'json', $context);
            }
            foreach ($object as $key_1 => $value_2) {
                if (preg_match('/.*/', (string) $key_1)) {
                    $data[$key_1] = $value_2;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\cedricziel\amznsponsoredproductsapiphp\Generated\Model\SponsoredProductsGlobalCampaign::class => false];
        }
    }
}
